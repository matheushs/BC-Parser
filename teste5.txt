	 (1, 53): 
 - "\n"
	 (2, 1): define - "define"
	 (2, 8): int - <ID>
	 (2, 11): ( - "("
	 (2, 12): number - <ID>
	 (2, 18): ) - ")"
	 (2, 20): { - "{"
	 (2, 22): 
 - "\n"
	 (3, 4): auto - "auto"
	 (3, 9): oldscale - <ID>
	 (3, 18): 
 - "\n"
	 (4, 4): oldscale - <ID>
	 (4, 13): = - "="
	 (4, 15): scale - "scale"
	 (4, 21): 
 - "\n"
	 (5, 4): scale - "scale"
	 (5, 10): = - "="
	 (5, 12): 0 - <NUMBERS>
	 (5, 14): 
 - "\n"
	 (6, 4): number - <ID>
	 (6, 11): /= - "/="
	 (6, 14): 1 - <NUMBERS>
	 (6, 40): 
 - "\n"
	 (7, 4): scale - "scale"
	 (7, 10): = - "="
	 (7, 12): oldscale - <ID>
	 (7, 21): 
 - "\n"
	 (8, 4): return - "return"
	 (8, 11): number - <ID>
	 (8, 18): 
 - "\n"
	 (9, 1): } - "}"
	 (9, 3): 
 - "\n"
	 (10, 2): 
 - "\n"
	 (11, 65): 
 - "\n"
	 (12, 1): define - "define"
	 (12, 8): power - <ID>
	 (12, 13): ( - "("
	 (12, 14): number - <ID>
	 (12, 20): , - ","
	 (12, 21): exponent - <ID>
	 (12, 29): ) - ")"
	 (12, 31): { - "{"
	 (12, 33): 
 - "\n"
	 (13, 4): if - "if"
	 (13, 7): ( - "("
	 (13, 8): exponent - <ID>
	 (13, 17): == - "=="
	 (13, 20): int - <ID>
	 (13, 23): ( - "("
	 (13, 24): exponent - <ID>
	 (13, 32): ) - ")"
	 (13, 33): ) - ")"
	 (13, 35): { - "{"
	 (13, 37): 
 - "\n"
	 (14, 7): return - "return"
	 (14, 14): number - <ID>
	 (14, 21): ^ - "^"
	 (14, 23): int - <ID>
	 (14, 26): ( - "("
	 (14, 27): exponent - <ID>
	 (14, 35): ) - ")"
	 (14, 37): 
 - "\n"
	 (15, 4): } - "}"
	 (15, 6): else - "else"
	 (15, 11): { - "{"
	 (15, 13): 
 - "\n"
	 (16, 7): return - "return"
	 (16, 14): e - "e"
	 (16, 15): ( - "("
	 (16, 17): exponent - <ID>
	 (16, 26): * - "*"
	 (16, 28): l - "l"
	 (16, 29): ( - "("
	 (16, 30): number - <ID>
	 (16, 36): ) - ")"
	 (16, 38): ) - ")"
	 (16, 40): 
 - "\n"
	 (17, 4): } - "}"
	 (17, 6): 
 - "\n"
	 (18, 1): } - "}"
	 (18, 3): 
 - "\n"
Programa analisado com sucesso

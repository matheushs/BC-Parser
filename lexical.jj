PARSER_BEGIN(BCParser)

import java.io.*;

public class BCParser {
    public static void main (String args[]) {
        BCParser parser;

        try{
            parser = new BCParser(System.in);
        } catch (Exception E) {
            System.out.println("Erro na entrada");
            return;
        }
        try {
            parser.lexicalAnalizer();
            //parser.bc();
            System.out.println("Programa analisado com sucesso");
        } catch (ParseException p){
            System.out.println("Erro na linha" + p.currentToken.beginLine + ", coluna " + p.currentToken.beginLine);
        }catch (TokenMgrError t){
            System.out.println("Erro de token:");
            switch(t.errorCode)
            {
                case TokenMgrError.LOOP_DETECTED:
                    System.out.println("Loop infinito no token manager");
                    break;
                case TokenMgrError.STATIC_LEXER_ERROR:
                    System.out.println("Tentativa de criação de mais de uma instancia do token manager");
                    break;
                case TokenMgrError.INVALID_LEXICAL_STATE:
                    System.out.println("Tentativa de mudança para estado lexico invalido");
                    break;
                case TokenMgrError.LEXICAL_ERROR:
                    System.out.println("Erro lexico detectado");
                    break;
                default:
                    System.out.println("Erro desconhecido");
            }
        }
    }
}

PARSER_END(BCParser)

SKIP:
{
    " "
|   "\t"
|   "\r"
|   < "#" (~["\r", "\n"])* >
|   < "/*" > : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP:
{
    < "*/" > : DEFAULT
|   < ~[] >
}

TOKEN:
{
    <SEMICOLON: ";">
|   <LRBRACK: "(">
|   <RRBRACK: ")">
|   <LBRACK: "[">
|   <RBRACK: "]">
|   <LCBRACK: "{">
|   <RCBRACK: "}">
|   <ASSIGN: "=">
|   <COMMA: ",">
|   <DOT: ".">
|   <BACKSLASH: "\\">
|   <QUOTE: "\"">
|   <LINEBREAK: "\n">
}

TOKEN:
{
    <IBASE: "ibase">
|   <OBASE: "obase">
|   <LAST: "last" | <DOT>>
|   <IF: "if">
|   <ELSE: "else">
|   <WHILE: "while">
|   <FOR: "for">
|   <NULL: "null">
|   <BREAK: "break">
|   <CONTINUE: "continue">
|   <QUIT: "quit">
|   <PRINT: "print">
|   <RETURN: "return">
|   <DEFINE: "define">
|   <AUTO: "auto">
|   <FUNCS: "s">
|   <FUNCC: "c">
|   <FUNCE: "e">
|   <FUNCL: "l">
|   <FUNCA: "a">
|   <FUNCJ: "j">
|   <SQRT: "sqrt">
|   <LENGTH: "length">
|   <SCALE: "scale">
}

TOKEN:
{
    <PLUS: "+">
|   <MINUS: "-">
|   <DIV: "/">
|   <MUL: "*">
|   <MOD: "%">
|   <PLUSPLUS: "++">
|   <MINUSMINUS: "--">
|   <POWER: "^">
|   <AND: "&&">
|   <OR: "||">
|   <NOT: "!">
|   <GREATER: ">">
|   <LESSER: "<">
|   <EQUAL: "==">
|   <GREATEREQ: ">=">
|   <LESSEREQ: "<=">
|   <NOTEQ: "!=">
|   <PLUSASSIGN: "+=">
|   <MINUSASSIGN: "-=">
|   <DIVASSIGN: "/=">
|   <MULASSIGN: "*=">
|   <MODASSIGN: "%=">
|   <POWASSIGN: "^=">
}

TOKEN:
{
    <#DIGITS: ["0"-"9"]>
|   <#LETTERS: ["a"-"z"]  | "_">
|   <#UPPER: ["A"-"Z"]>
|   <#FLOAT: ("-" | "+")? (<DIGITS>)* "." (<DIGITS>)+>
|   <#INTEGER: ("-" | "+")? (<DIGITS>)+>
|   <#LETTERSNUMBERS: <DIGITS> | <LETTERS>>
|   <SYMBOLS: " " | <NOT> | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | <LESSER> | <ASSIGN> | <GREATER>  | "[" | "]" | "^" | "{" | "|" | "}" | "\\n">
|   <NUMBERS: <INTEGER> | <FLOAT>>
|   <ID: <LETTERS> (<LETTERSNUMBERS>)*>
//|   <WORDS: (~["\""])*>
|   <WORDS: <QUOTE>(<DIGITS> | <LETTERS> | <UPPER> | <SYMBOLS>)*<QUOTE>>
}

void bc():
{ }
{
  (COMMAND() | DEFINEFUNCTION())+ <EOF>
}

void STRING():
{ }
{
    <WORDS>
}

void SEP():
{ }
{
    (<SEMICOLON> | <LINEBREAK>)+
}

void VAR():
{ }
{
    <ID> (<LBRACK> E() <RBRACK>)?
|   <SCALE>
}

void COMMAND():
{ }
{
    E()
|   COMPOST_COMMAND()
|   COMMAND_IF()
|   COMMAND_WHILE()
|   COMMAND_FOR()
|   COMMAND_NULL()
|   COMMAND_BREAK()
|   COMMAND_CONTINUE()
|   COMMAND_QUIT()
|   COMMAND_PRINT()
|   COMMAND_RETURN()
|   COMMAND_STRING()
}

void COMPOST_COMMAND():
{ }
{
    <LCBRACK> (<LINEBREAK>)* COMMANDLIST() <RCBRACK>
}

void COMMANDLIST():
{ }
{
    (<LINEBREAK>)* COMMAND() ( SEP() ( COMMAND() )? )*
    //COMMAND() (SEP() COMMAND() (SEP())?)*
}

void COMMAND_IF():
{ }
{
    <IF> <LRBRACK> E() <RRBRACK> (<LINEBREAK>)? COMMAND() (LOOKAHEAD(2) <ELSE> COMMAND())?
}

void COMMAND_WHILE():
{ }
{
    <WHILE> <LRBRACK> E() <RRBRACK> COMMAND()
}

void COMMAND_FOR():
{ }
{
    <FOR> <LRBRACK> (E())? <SEMICOLON> (E())? <SEMICOLON> (E())? <RRBRACK> COMMAND()
}

void COMMAND_NULL():
{ }
{
    SEP()
}

void COMMAND_BREAK():
{ }
{
    <BREAK>
}

void COMMAND_CONTINUE():
{ }
{
    <CONTINUE>
}

void COMMAND_QUIT():
{ }
{
    <QUIT>
}

void COMMAND_PRINT():
{ }
{
    <PRINT> (STRING()| EXPRESSIONLIST())
}

void COMMAND_RETURN():
{ }
{
    <RETURN> (LOOKAHEAD(2) <LRBRACK> (E())? <RRBRACK> | (E()))?
}

void COMMAND_STRING():
{ }
{
    STRING()
}

void EXPRESSIONLIST():
{ }
{
    E() (<COMMA> E())*
}

void E():
{ }
{
    E1() (<OR> E1())*
}

void E1():
{ }
{
    E2() (<AND> E2())*
}

void E2():
{ }
{
    (<NOT>)? E3()
}

void E3():
{ }
{
    E4() ((<EQUAL> | <LESSEREQ> | <GREATEREQ> | <NOTEQ> | <LESSER> | <GREATER>)? E4())?
}

void E4():
{ }
{
    LOOKAHEAD(2)((VAR()) ((<PLUSPLUS> | <MINUSMINUS>) |
                                        ((<ASSIGN>
                                        |  <PLUSASSIGN>
                                        |  <MINUSASSIGN>
                                        |  <MULASSIGN>
                                        |  <DIVASSIGN>
                                        |  <MODASSIGN>
                                        |  <POWASSIGN>) E4())))
|   E5()
}

void E5():
{ }
{
    E6() (LOOKAHEAD(2)(<PLUS> | <MINUS>) E6())*
}

void E6():
{ }
{
    E7() ((<MUL> | <DIV> | <MOD>) E7())*
}

void E7():
{ }
{
    E8() (<POWER> E7())?
}

void E8():
{ }
{
    (<MINUS>)? E9()
}

void E9():
{ }
{
    ((<PLUSPLUS> | <MINUSMINUS>) VAR()) | E10()
}

void E10():
{ }
{
    <NUMBERS>
|   (<LRBRACK>) E() (<RRBRACK>)
|   (<SQRT> (<LRBRACK>) E() (<RRBRACK>))
|   (<LENGTH> (<LRBRACK>) E() (<RRBRACK>))
|   (<SCALE> (LOOKAHEAD(2) (<LRBRACK>) E() (<RRBRACK>))?)
|   LOOKAHEAD(2) CALLFUNCTION()
|   (VAR())
|   <IBASE>
|   <OBASE>
|   <LAST>
|   (<FUNCS> (<LRBRACK>) E() (<RRBRACK>))
|   (<FUNCC> (<LRBRACK>) E() (<RRBRACK>))
|   (<FUNCE> (<LRBRACK>) E() (<RRBRACK>))
|   (<FUNCL> (<LRBRACK>) E() (<RRBRACK>))
|   (<FUNCA> (<LRBRACK>) E() (<RRBRACK>))
|   (<FUNCJ> (<LRBRACK>) E() (<RRBRACK>) <COMMA> (<LRBRACK>) E() (<RRBRACK>))
}

void CALLFUNCTION():
{ }
{
    <ID> <LRBRACK> (EXPRESSIONLIST())? <RRBRACK>
}

void DEFINEFUNCTION():
{ }
{
    <DEFINE> <ID> <LRBRACK> (VARLIST())? <RRBRACK> (<LINEBREAK>)? <LCBRACK> (<LINEBREAK>)*
    (LOOKAHEAD(1) <AUTO> VARLIST() SEP() | SEP())?
    COMMANDLIST() <RCBRACK>
}

void VARLIST():
{ }
{
    <ID> ((<LBRACK>) (<RBRACK>))? (<COMMA> <ID> ((<LBRACK>) (<RBRACK>))?)*
}

JAVACODE void lexicalAnalizer()
{
    try {
        Token t = getNextToken();

        while(t.kind != 0) {
            System.out.println("\t (" + t.beginLine + ", " + t.beginColumn + "): " + t.image + " - " + tokenImage[t.kind]);
        t = getNextToken();
    }
  } catch (TokenMgrError error) {
    System.out.println(error.getMessage());
  }
}
